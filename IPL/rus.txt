
#------------------------------------------------------------------------------------------------------------------------------------
#   начало файла задания регулярных слов языка

#   word_id=  слово       через " , " синонимы                         # значение регулярного слова данного языка
#------------------------------------------------------------------------------------------------------------------------------------
    program=  программа           , проблему назовём                   # начало функции с точкой входа и вывод названия программы в заголовок окна консоли
       vars=  переменные          , с параметрами   , найти     , дано # начала блока объявления переменных, констант и типов
   need_var=  нужна переменная    , нужно           , пусть     , хочу # создание одной переменной
      begin=  начать              , следующее                   , "("  # начало блока кода или списка пунктов кода
         if=  если                , в случае                           # оператор ветвеления языка
      while=  цикл                , пока                               # цикл с предусловием
        for=  повторять           , для                                # цикл со счетчиком
      scanf=  ввод    , ввести    , считать данные                     # считать с консоли или текстового файла (в текстовом формате)
     printf=  вывод   , вывести   , печатать данные , печать           # печать в коммандную строку или текст.файл форматированно
     sizeof=  длина               , размер          , размера          # получить размер чего-то (длину массива, строки; кол-во эл-тов словаря, число знаков целого числа)
     typeid=  тип                 , получить тип переменной            # получить тип переменной в виде строки
  type_cast=  привести к типу     , преобразовать к типу               # преобразовать тип переменной
     random=  случайное значение  , случайное       , случайно         # возвращает действительное случайное значение в заданном промежутке
   function=  функция             , операция        , процедура        # начало определения функции

        end=  закончить           , "."                         , ")"  # конец блока кода или списка пунктов кода
     return=  результатом         , с результатом   , вернуть          # указание на то что функция или блок кода возвращают значение и задание этого значения
       exit=  завершить работу    , конец программы , выход            # операция завершения программы
#------------------------------------------------------------------------------------------------------------------------------------
#  арифметические операции        = ! + - * / % /\ \/ !/ == != >= <= > < 

   arth_bnd=  зададим значение    , назовём                     , ":=" # присваивание значения
   arth_add=  плюс                , прибавить       , сложить с , "+"  # операция сложения
   arth_sub=  минус               , вычтем          , отнять    , "-"  # вычитание
   arth_mul=                        умножить на                 , "*"  # нахождение произведения чисел
   arth_div=  делим на            , разделить на                , "/"  # операция деления
   arth_mod=  разделить по модулю , взять остаток от деления на , "%"  # деление по модулю целого числа

   arth__or=  или                 , "\/"                        , "|"  # логическая операция дизъюнкция
   arth_and=  и                   , "/\"                        , "&"  # логическая операция конъюнкция
   arth_not=  не                  , "~"                         , "!"  # логическое отрицание
#  arth_xor=  исключающее или     , "!/"                        , "^"  # операция исключающего ИЛИ
								  
    arth_eq=  равно               , "="                         , "==" # проверка на равенство
    arth_ls=  меньше                                            , "<"  # левый операнд меньше правого
    arth_gt=  больше                                            , ">"  # левый операнд больше правого
    arth_ne=  не равно            , "<>"                        , "!=" # проверить на неравенство
    arth_le=  не превосходит      , больше равно                , "<=" # левый операнд больше правого
    arth_ge=  превосходит         , меньше равно                , ">=" # левый операнд меньше правого

#------------------------------------------------------------------------------------------------------------------------------------
#   функции контейнерных типов

    cnt_add=  внести , добавить в , вставить в      , положить в       # метод добавления элемента в контейнерный тип данных ИЯП
    cnt_del=  изъять , удалить из , извлечь из					       # метод извлечения элемента из контейнера
    cnt_fnd=  найти  , искать в   , найти в						       # метод нахождения первого элемента с заданным значением и возвращение его ключа
    cnt_clr=  очистить            , освободить					       # очитка перечисляемого типа
#   cnt_srt=  сортировать         , упорядочить					       # встроенный метод сортировки элементов внутри контейнера
  jnt_field=  как  ,  "'"         , "--"                        , ":"  # используется для вызова метода объекта или задания типа переменной

    o_index=  "["												       # индексирование открыть
    c_index=  "]"												       # индексирование закрыть, между ними должен быть ключ контейнера
 post_index=  по индексу		  , с номером 		, по ключу         # постфиксный вид взятия по индексу
  pre_index=  й элемент , го элемента , му элементу , м элементом,  
			  е поле    , го поля     , му полю     , м полем , поле   # префиксный вид конструкции индексирования ИЯП

#------------------------------------------------------------------------------------------------------------------------------------
#  типы данных

   vars_int=  целое				  , целое число     			       # 
   vars_str=  строка , текст      , последовательность символов        #
   vars_flt=  вещественное        , действительное  , десятичное       #
   vars_fnc=  подключить          , импорт		    , объявление       #
   vars_cnt=  контейнер			  , кортеж 						       #
   vars_jnt=  объединение         , структура	    , словарь          #
   vars_cns=  константа           , константное                        #
																       
   vars_arr=  массив			  , вектор						       #  модификаторы для конкретизации типа хранения ...
   vars_lst=  список		      , связный список				       # ... элеметов внутри перечислимого типа данных ИЯП

#------------------------------------------------------------------------------------------------------------------------------------

   if_then= тогда                 , то							       # использовается для объявления конца выражения в операторе условия 
   if_elif= иначе если            , в другом случае				       # объявление одной из альтернативных веток оператора условного перехода
   if_else= иначе                 , в оставшемся случае			       # последний вариант ветвления
							      								       
  for_each= каждого			      , всякого		    , любого	       # модификатор цикла for, превращает цикл в for_each по произвольному контейнеру языка
  for_elem= элемента			   								       # модификатор, указывает на использование элементов контецнера в качестве значения счетчика
  for_from= от				      , начиная от 		, из		       # первая часть заголовка цикла со счетчиком
 for_until= до					  , заканчивая					       # вторая часть заголовка цикла со счетчиком
 for_by_st= возрастая на , шагом  , убывая на       , с шагом          # третья часть заголовка цикла со счетчиком
  for_rvrs= в обратном порядке    , с конца         , обратно          # модификатор, пишется в конце заголовка for_each, для индексирования с конца на начало контейнера
							      								       
        do= выполнять , выполнить , делать			, делаем	       # использовается для объявления конца заголовка функции или цикла
     break= прервать              , выйти из цикла  , стоп		       # экстренный выход из заданного числа циклов

#------------------------------------------------------------------------------------------------------------------------------------
#  ввод констант

    in_int= целую константу							     		       #     модификаторы, использующиеся только в функции ввода ...
    in_str= строквую константу	  , тестовую константу			       # ... ввод определнного типа константы, для использования ...
    in_flt= десятичиную константу , число с плавающей точкой	       # ... внутри конкретного выражения языка

#------------------------------------------------------------------------------------------------------------------------------------
#  разделители

  end_expr= ","												           # знак, используется для отделения параметров функций
  end_cmmd= ";"                 # , "."							       # формальный знак конца предложения языка
  
#  комментарии

  line_comm=  "#"                 , "//"			, REM		       # однострочный комментарий, заканчивается переносом строки
  o_comment=  "/*"                , "{"							       # начало многострочного комментария
  c_comment=  "*/"                , "}"							       # конец  многострочного комментария

#--------------------------------------------------------------------------------------------------------------------------------
#   конец файла задания регулярных слов языка

